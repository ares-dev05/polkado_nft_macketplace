version: "3"

services:
  market_db:
    container_name: market_db
    image: postgres
    env_file:
      - ./.env
    environment:
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - marketnet
    restart: unless-stopped

  market_backend:
    container_name: market_backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile.backend
    ports:
      - "5000:5000"
      - "5001:5001"
    env_file:
      - ./.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionString=Host=market_db;Port=5432;Database=marketplace;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_URLS=http://*:5000
    networks:
      - marketnet
    depends_on:
      - "market_db"
    restart: unless-stopped

  # .NET unique escrow service
  # escrow_unique:
  #   container_name: escrow_unique
  #   build:
  #     context: ./backend
  #     dockerfile: ./Dockerfile.unique.escrow
  #   ports:
  #     - "5002:5002"
  #   env_file:
  #     - ./.env
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ConnectionString=Host=market_db;Port=5432;Database=marketplace;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
  #     - ASPNETCORE_URLS=http://*:5002
  #     - MarketplaceUniqueMnemonic=${ADMIN_SEED}
  #     - MatcherContractAddress=${MatcherContractAddress}
  #   networks:
  #     - marketnet
  #   depends_on:
  #     - "market_db"
  #   restart: unless-stopped

  # JS unique escrow service
  escrow_unique:
    container_name: escrow_unique
    build:
      context: ./backend
      dockerfile: ./Dockerfile.unique.js.escrow
    env_file:
      - ./.env
    environment:
      - DB_HOST=market_db
      - DB_PORT=5432
      - DB_NAME=marketplace
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - ADMIN_SEED=${ADMIN_SEED}
      - MatcherContractAddress=${MatcherContractAddress}
    networks:
      - marketnet
    depends_on:
      - "market_db"
    restart: unless-stopped

  escrow_kusama:
    container_name: escrow_kusama
    build:
      context: ./backend
      dockerfile: ./Dockerfile.kusama.escrow
    env_file:
      - ./.env
    environment:
      - DB_HOST=market_db
      - DB_PORT=5432
      - DB_NAME=marketplace
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - ADMIN_SEED=${ADMIN_SEED}
    networks:
      - marketnet
    depends_on:
      - "market_db"
    restart: unless-stopped

  mint_backend:
    container_name: mint_backend
    build:
      context: ./mint_backend
      dockerfile: ./Dockerfile
    ports:
      - "3003:3003"
    env_file:
      - ./.env
    environment:
      - UniqueEndpoint=${UniqueEndpoint}
      - MINT_ADMIN_SEED=${MINT_ADMIN_SEED}
      - MINT_COLLECTION_ID=${MINT_COLLECTION_ID}
    networks:
      - marketnet
    volumes:
      - ./public:/usr/src/app/public
    restart: unless-stopped

#  apps_marketplace_ui:
#    image: apps
#    container_name: apps_marketplace_ui
#    expose:
#      - 3000
#    ports:
#      - 3000:3000
#    build:
#      context: ./ui
#      dockerfile: Dockerfile-ui-v3
#    env_file:
#      - ./.env
#    environment:
#      - escrowAddress=${MarketplaceUniqueAddress}
#      - MatcherContractAddress=${MatcherContractAddress}
#      - mintedCollection=${MINT_COLLECTION_ID}
#      - vaultAddress=${MarketplaceUniqueAddress}
#    networks:
#      - marketnet
#    depends_on:
#      - "market_backend"
#    restart: unless-stopped
#    command: bash -c 'yarn start'

  # apps_marketplace_ui:
  #   container_name: apps_marketplace_ui
  #   expose:
  #     - 3000
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - marketnet
  #   build:
  #     context: ./test_ui
  #     dockerfile: Dockerfile
  #   restart: unless-stopped

  #nginx:
  #  container_name: nginx_proxy
  #  image: nginx:1.19
  #  ports:
  #    - 80:80
  #  volumes:
  #    - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #  networks:
  #    - marketnet
  #  depends_on:
  #    - apps_marketplace_ui
  #  restart: unless-stopped

  ui:
    container_name: ui
    build:
      context: ./ui
      dockerfile: ./Dockerfile-ui-v4
      args:
        - escrowAddress=${MarketplaceUniqueAddress}
        - MatcherContractAddress=${MatcherContractAddress}
        - mintedCollection=${MINT_COLLECTION_ID}
        - vaultAddress=${MarketplaceUniqueAddress}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/whitelabelmarket.key:/etc/ssl/private/whitelabelmarket.key
      - ./nginx/whitelabelmarket.pem:/etc/ssl/certs/whitelabelmarket.pem
    ports:
#      - "3000:3000"
      - "80:80"
      - "443:443"
    env_file:
      - ./.env
    environment:
      - escrowAddress=${MarketplaceUniqueAddress}
      - MatcherContractAddress=${MatcherContractAddress}
      - mintedCollection=${MINT_COLLECTION_ID}
      - vaultAddress=${MarketplaceUniqueAddress}
    networks:
      - marketnet
    depends_on:
      - "market_backend"
    restart: unless-stopped

  # faucet_bot:
  #   container_name: faucet_bot
  #   build:
  #     context: ./faucet_bot
  #     dockerfile: ./Dockerfile
  #   volumes:
  #     - ./logs:/logs
  #   environment:
  #     - TG_TOKEN=${FAUCETBOTTOKEN}
  #     - faucetSeed=${FAUCET_BOT_ADMIN}
  #     - wsEndpoint=${UniqueEndpoint}
  #   restart: 'always'

networks:
  marketnet:
    driver: bridge

volumes:
  postgres:
